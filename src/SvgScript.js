//var g_prime = generated by code;

var a_hover_timeout = null;
var b_hover_timeout = null;

var last_a_hovered_exponent = -1;
var last_b_hovered_exponent = -1;

function clear_a_color(v)
{
    
    //alert("clear_a_color(" + v + ");");
    
    if (parseInt(v) >= 0)
    {
        var dMax = Math.pow(g_prime, v);
        for (var i = 0; i < dMax; ++i)
        {
            document.getElementById("a_" + i + "_" + v).removeAttribute("fill");
        }
    }
}

function clear_b_color(min, max)
{
    
    //alert("clear_b_color(" + min + ", " + max + ");");
    
    for (var v = min; v <= max; ++v)
    {
        var dMax = Math.pow(g_prime, v);
        for (var i = 0; i < dMax; ++i)
        {
            if ((v == 0) || ((i % g_prime) != 0))
            {
                document.getElementById("b_" + i + "_" + v).removeAttribute("fill");
            }
        }
    }
}

function getNearestValues(element, prefix)
{
    while (true)
    {
        var values = element.id;
        if (values != null)
        {
            values = values.split("_");
            if (values != null && values.length >= 2 && values[0] == prefix) return values;
        }
        
        if (element.parentNode != null) element = element.parentNode;
        else element = element.correspondingUseElement;
    }
}

function hover_a_start(evt)
{
    clearTimeout(a_hover_timeout);
    
    evt.target.setAttribute("stroke", "black");
    
    var values = getNearestValues(evt.target, "a");
    var num = parseInt(values[1], 10);
    var exponent = parseInt(values[2], 10);
    
    //alert("hover_a_start(" + num + ", " + exponent + ");");
    
    for (var v = 0; v <= exponent; ++v)
    {
        var dMax = Math.pow(g_prime, v);
        for (var i = 0; i < dMax; ++i)
        {
            if ((v == 0) || ((i % g_prime) != 0))
            {
                document.getElementById("b_" + i + "_" + v).setAttribute("fill", cyclic_hue(num * i / dMax));
            }
        }
    }
    
    clear_b_color(1 + exponent, last_a_hovered_exponent);
    last_a_hovered_exponent = exponent;
}

function hover_a_stop(evt)
{
    //alert("hover_a_stop();");
    
    evt.target.removeAttribute("stroke");
    a_hover_timeout = setTimeout(hover_a_clear);
}

function hover_a_clear()
{
    clear_b_color(0, last_a_hovered_exponent);
    last_a_hovered_exponent = -1;
}

function hover_b_start(evt)
{
    clearTimeout(b_hover_timeout);
    
    var values = getNearestValues(evt.target, "b");
    var num = parseInt(values[1], 10);
    var exponent = parseInt(values[2], 10);
    
    //alert("hover_b_start(" + num + ", " + exponent + ");");
    
    document.getElementById("b_" + num + "_" + exponent).setAttribute("stroke", "black");
    
    var dMax = Math.pow(g_prime, exponent);
    for (var i = 0; i < dMax; ++i)
    {
        document.getElementById("a_" + i + "_" + exponent).setAttribute("fill", cyclic_hue(num * i / dMax));
    }
    
    if (last_b_hovered_exponent != exponent)
    {
        clear_a_color(last_b_hovered_exponent);
        last_b_hovered_exponent = exponent;
    }
}

function hover_b_stop(evt)
{
    var values = getNearestValues(evt.target, "b");
    var num = parseInt(values[1], 10);
    var exponent = parseInt(values[2], 10);
    
    //alert("hover_b_stop(" + num + ", " + exponent + ");");
    
    document.getElementById("b_" + num + "_" + exponent).removeAttribute("stroke");
    
    b_hover_timeout = setTimeout(hover_b_clear);
}

function hover_b_clear()
{
    clear_a_color(last_b_hovered_exponent);
    last_b_hovered_exponent = -1;
}

function cyclic_hue(angle)
{
    var r = 0;
    var g = 0;
    var b = 0;
    
    angle %= 1;
    
    if (angle < 1/3)
    {
        r = (angle - 1/3) / (0/3 - 1/3);
        g = (angle - 0/3) / (1/3 - 0/3);
        
        r = Math.sqrt(r);
        g = Math.sqrt(g);
    }
    else if (angle < 2/3)
    {
        g = (angle - 2/3) / (1/3 - 2/3);
        b = (angle - 1/3) / (2/3 - 1/3);
        
        g = Math.sqrt(g);
        b = Math.sqrt(b);
    }
    else
    {
        b = (angle - 3/3) / (2/3 - 3/3);
        r = (angle - 2/3) / (3/3 - 2/3);
        
        b = Math.sqrt(b);
        r = Math.sqrt(r);
    }
    
    r *= 256;
    g *= 256;
    b *= 256;
    
    return "rgb(" + r.toFixed() + "," + g.toFixed() + "," + b.toFixed() + ")"
}